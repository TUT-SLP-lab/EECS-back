name: Deploy AWS CloudFormation
on:
  workflow_call:
    inputs:
      pr-number:
        description: 'Pull Request Number'
        required: true
        type: string
      stack-name:
        description: 'Stack Name'
        required: true
        type: string
      s3-dir:
        description: 'S3 Directory'
        required: true
        type: string
    secrets:
      AWS_S3_BUCKET:
        description: 'AWS S3 Bucket'
        required: true
      AWS_ACCOUNT_ID:
        description: 'AWS Account ID'
        required: true
      AWS_GITHUB_OIDC_ROLE_NAME:
        description: 'AWS GitHub OIDC Role Name'
        required: true
      SLACK_APP_CLIENT_ID:
        required: true
      SLACK_APP_CLIENT_SECRET:
        required: true
      SENDER_EMAIL:
        required: true
      CLIENT_URL:
        required: true
      CLIENT_URL_OWN_DOMAIN:
        required: true

env:
  AWS_REGION: 'ap-northeast-1'
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_NAME }}
  ROLE_TO_ASSUME: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_GITHUB_OIDC_ROLE_NAME }}
  OPENAPI_FILE: openapi.yaml
  PR_NUMBER: ${{ inputs.pr-number }}
  STACK_NAME: ${{ inputs.stack-name }}
  S3_DIR: ${{ inputs.s3-dir }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      checks: read
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup aws-sam
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          audience: sts.amazonaws.com

      - run: aws sts get-caller-identity

      - name: Build and Deploy Cloud Formation stacks
        id: deploy_step
        run: |
          sam build
          sam deploy --template-file .aws-sam/build/template.yaml --stack-name ${STACK_NAME} --capabilities CAPABILITY_NAMED_IAM --s3-bucket ${AWS_S3_BUCKET} --no-fail-on-empty-changeset --parameter-overrides PrNumber=${PR_NUMBER} SlackClientId=${{ secrets.SLACK_APP_CLIENT_ID }} SlackClientSecret=${{ secrets.SLACK_APP_CLIENT_SECRET }} SenderEmail=${{ secrets.SENDER_EMAIL }} ClientURL=${{ secrets.CLIENT_URL }} ClientURLOwnDomain=${{ secrets.CLIENT_URL_OWN_DOMAIN }}
          deployed_url=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue" --output text)
          echo "deployed_url=$deployed_url" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: success() && github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |-
            Deploy Success!!
            Deploy URL! ${{ steps.deploy_step.outputs.deployed_url }}
          comment_tag: 'deploy-success'
